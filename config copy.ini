### Running the configCreator will overwrite your corrent config.ini. Some of the explnations in the original config.ini will disappear. This copy is not read by the porgram but serves as a reference in case you create a new config.ini later. ###


# Some values are already pre-filled for ease of use, feel free to change then
# Ensure that all values are in plain text, that is, no quotation marks added to indicate strings.
# Above each parameter, there is a short description of it.
[General]
# Mandatory. String. Path to a BIDS-compliant dataset
dataset_path = your/path/here
# Optional. String. Defaults to .edf. File extension of your EEG files. No other formats other thatn the default are currently implemented.
file_extension = 
# Optional. String. Defaults to standard_1020. No other standards are currently implemented.
eeg_placement_scheme = 
# Optional. String. Reference channel in your EEG data. If left empty, it is assumed that the reference is already applied in the data.
reference_channel = 
# Optional. Integer. Defaults to 50. Power line frequenzy in your region, measured in Hz.
line_frequency_hz = 50
# Optional. Boolean. Defaults to False. Choose is ICA should be included in the cleaning or not.
run_ica = True
# Optional. Boolean. Defaults to False. Choose is bad channels should be interpolated.
interpolate_bad_channels = False
# Optional. Boolean. Defaults to False. Choose is the cleaned EEG file should be saved as a .fif file.
save_eeg_as_fif = False

# Algorithms used for bad channel detection. The algorithms are defined by the PyPrep library:
# https://pyprep.readthedocs.io/en/latest/generated/pyprep.NoisyChannels.html

# Optional. Boolean. Defaults to False.
# Choose which algorithms should be included in flagging bad channels.
# A more detailed description of the algorithms can be found in the report.
# Note that all algorithms are still run regardless of the parameter, and a list of bad channels found by each is printed.
# However, only the channels found by algorithms set to True will be included in the run's overall bad channel list for further cleaning.
[Select_algorithms_run]
# Flags channels with flat signals or nan values
bads_by_nan_flat = True
# Flags channels contain very high amounts of high-frequency noise.
bads_by_hfnoise = True
# Flags channels with very high low very low overall amplitudes
bads_by_deviation = True
# Flags channels that do not correlate with any other channels
bads_by_correlation = True
# Flags channels that have low signal-to-noise-ratio, that is channels that are bad by both hf noise and by low correlation
bads_by_snr = True
# Uses RANSAC method to predict what the signal for each channel should look like. If predicted and actual channels deviate highly, the channel is flagged.
bads_by_ransac = True


[Bads_by_hfnoise]
# Optional. Float. Defualts to 5.0. Specifies the minimum z-score for which a channel should be considered bad-by-high-frequency-noise.
hf_zscore_threshold = 

[Bads_by_deviation]
# Optional. Float. Defualts to 5.0. Specifies the minimum absolute z-score for which a channel is considered bad-by-deviation.
deviation_threshold = 

[Bads_by_correlation]
# Optional. Float. Defaults to 1.0. The length of each correlation window, measured in seconds.
correlation_secs = 
# Optional. Float. Defaults to 0.4. The lowest correlation between a channel and all other channels for a channel to be considered “bad” within a given window.
correlation_threshold = 
# Optional. Float. Defaults to 0.01. The min-imum fraction of bad windows for a channel to be considered “bad-by-correlation” or “bad-by-dropout”
frac_bad_corr = 

[Bads_by_ransac]
# Optional. Int. Defaults to 50. Number of random samples to be used by RANSAC to predict the signal for each channel.
n_samples = 
# Optional. Float. Defaults to 0.25.  Proportion of channels to be used for signal predication.
sample_prop = 
# Optional. Float Defaults to 0.75. The minimum correlation between the predicted signal and the actual signal for a channel to be considered “good” in each RANSAC window.
corr_thresh = 
# Optional. Float. Defaults to 0.4. The minimum fraction of bad windows for a channel to be considered bad-by-ransac.
frac_bad_ransac = 
# Optional. Float. Defaults to 5.0. The length of each ransac window, measured in seconds.
corr_window_secs = 
# Optional. Boolean. Defaults to False. This option decides how RANSAC will predict the signals. If set to True, it will predict signals for chunks
# of channels over the entire signal length (channel-wise RANSAC). If set to False, it will predict signals for all channels at once but over smaller
#time windows (window-wise RANSAC). Channel-wise RANSAC generally needs more memory but can be faster if there’s enough RAM.
channel_wise = False

